# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "aws_access_key_id" {
  type    = string
  default = "${env("AWS_ACCESS_KEY")}"
}

variable "aws_secret_key" {
  type    = string
  default = "${env("AWS_SECRET_ACCESS_KEY")}"
}

variable "base_dir" {
  type    = string
  default = "${env("CLOUD_DIR")}"
}

variable "cookbook_path" {
  type    = string
  default = "${env("CLOUD_DIR")}/ops/devopracy-base/cookbooks"
}

variable "ssh_private_key_file" {
  type    = string
  default = "${env("SSH_PRIVATE_KEY_FILE")}"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "amazon-ebs" "autogenerated_1" {
  access_key = "${var.aws_access_key_id}"
  ami_block_device_mappings {
    delete_on_termination = "true"
    device_name           = "/dev/sda1"
    volume_size           = 30
  }
  ami_description  = "fedora 21 devopracy base"
  ami_name         = "fedora-base-${legacy_isotime("2006-01-02")}"
  ami_users        = [""]
  force_deregister = "true"
  instance_type    = "t2.small"
  launch_block_device_mappings {
    delete_on_termination = "true"
    device_name           = "/dev/sda1"
    volume_size           = 30
  }
  region               = "us-west-2"
  secret_key           = "${var.aws_secret_key}"
  security_group_ids   = [""]
  source_ami           = ""
  ssh_keypair_name     = "bootstrap"
  ssh_private_key_file = "${var.ssh_private_key_file}"
  ssh_username         = "fedora"
  subnet_id            = ""
  tags = {
    lock    = "none"
    os      = "fedora 21"
    release = "latest"
    role    = "base"
    stage   = "dev"
    version = "0.0.1"
  }
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "shell" {
  }

  provisioner "shell" {
    script = "${var.base_dir}/ops/devopracy-base/files/ext_disk.sh"
  }

  provisioner "shell" {
    inline = ["sudo reboot", "sleep 30", "sudo resize2fs /dev/xvda1"]
  }

  provisioner "shell" {
    inline = ["sudo mkdir -p /etc/chef && sudo chmod 777 /etc/chef", "sudo mkdir -p /tmp/packer-chef-client && sudo chmod 777 /tmp/packer-chef-client"]
  }

  provisioner "file" {
    destination = "/etc/chef/cookbooks"
    source      = "${var.cookbook_path}"
  }

  provisioner "chef-client" {
    execute_command   = "cd /etc/chef && sudo chef-client --local-mode -c /tmp/packer-chef-client/client.rb -j /tmp/packer-chef-client/first-boot.json"
    run_list          = ["recipe[devopracy-base::default]"]
    server_url        = "http://localhost:8889"
    skip_clean_client = "true"
    skip_clean_node   = "true"
  }

  provisioner "file" {
    destination = "/home/fedora/spec/"
    source      = "${var.base_dir}/ops/devopracy-base/test/spec"
  }

  provisioner "file" {
    destination = "/home/fedora/Rakefile"
    source      = "${var.base_dir}/ops/devopracy-base/test/Rakefile"
  }

  provisioner "shell" {
    inline = ["/opt/chef/embedded/bin/rake spec"]
  }

  provisioner "shell" {
    inline = ["sudo chmod 600 /etc/chef"]
  }

}
